#include "stdafx.h"
#include "resource.h"
#include "ObjectStageMap.h"
#include "ObjectMenu.h"

#include "rapidjson/document.h"
#include "rapidjson/writer.h"
#include "rapidjson/stringbuffer.h"


#define IDC_COMBOBOX			1




using namespace rapidjson;

// 전역 변수
HINSTANCE g_hInst;						// 현재 인스턴스입니다.
HWND g_hWnd;							// WinMain 핸들
HWND g_hWndChangeSize;					// 다이얼로그 핸들
HWND g_hWndTrigger;						// 다이얼로그 핸들
HWND g_hWndCreateTrigger;				// 다이얼로그 핸들
RECT g_DCRect;							// WinMain 크기
CScreenDib *g_ScreenDib;				// 전역으로 스크린DIB 생성

BITMAPINFO *g_stpDibInfo;				// 스크린 DIB에 대한 정보가 들어 있는 구조체

ObjectStageMap *g_ObjectStageMap;		// 오브젝트 스테이지 맵
ObjectMenu *g_ObjectMenu;				// 오브젝트 메뉴

int g_iMapWidth = df_MAP_RIGHT;			// 맵 가로 길이
int g_iMapHeight = df_MAP_BOTTOM;		// 맵 세로 길이

bool g_bTileOption = false;				// 타일 격자 옵션
bool g_bPropertiesOption = false;		// 속성 옵션
bool g_Tkey = false;
bool g_YKey = false;


// 트리거 조건
enum enNeed {
	NEED_EMPT,
	NEED_ON_TRIGGER

};

// 트리거 발동
enum enAction {
	ACTION_STAGE_CLEAR

};



// extern 변수
CSpriteDib *g_cSprite;					// 스프라이트
CList<Object *> *g_ObjectList;			// WinMain 오브젝트 리스트
vector<stTile*> g_vecTile;				// 타일 좌표
ObjectUnit *g_Player = NULL;			// 플레이어
BYTE *g_bypDest;						// 스크린 버퍼
int g_iDestWidth;						// 스크린 가로 길이
int g_iDestHeight;						// 스크린 세로 길이
int g_iDestPitch;						// 스크린 피치 값

int g_iMouseX;							// 마우스 좌표 X
int g_iMouseY;							// 마우스 좌표 Y
RECT g_CameraRect;						// 카메라 좌표

bool g_bOnUIMouse;										// 마우스가 UI에 올라갔을 경우
bool g_bUpdateProperties = false;						// 타일 속성좌표 업데이트 플래그
int g_iMakeTileIndex;									// 마우스 상태가 MAKE TILE 일 경우 만들 타일 인덱스 번호
MouseClick g_MouseClickObject = MOUSE_CLICK_EMPT;		// 마우스 클릭했을 때 선택된 오브젝트 (드래그에서 사용)
MouseState g_MouseState = MOUSE_STATE_EMPT;				// 마우스 상태
ObjectMousePointer * g_MousePointer;					// 마우스 지시자 (마우스 상태에따라 변함)
ObjectMenuElementListScrollBar * g_MenuElementListScrollBar;		// 메뉴 스크롤 바

int	g_iPropertiesCenterPointX;			// 속성 중점 좌표 X
int	g_iPropertiesCenterPointY;			// 속성 중점 좌표 Y
int g_iMakePropertiesSizeX;				// 속성 배열 X 길이
int g_iMakePropertiesSizeY;				// 속성 배열 Y 길이
BYTE g_byCheckMapProperties;			// 검사할 MAP 속성 값
BYTE g_byCheckMakeProperties;			// 검사할 MAKE 속성 값
BYTE *g_bypArrayMAkeTileProperties;		// 타일 속성

// 4칸 짜리 타일 속성
BYTE g_byArrayMAkeTileProperties_4[df_TILE_PROPERTIES_Y * df_TILE_PROPERTIES_X] = {
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 0, 0, 1, 1,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 1, 0, 0, 0, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1
};

// 1칸 짜리 타일 속성
BYTE g_byArrayMAkeTileProperties_1[df_TILE_PROPERTIES_Y * df_TILE_PROPERTIES_X] = {
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 0, 0, 1, 1,
	1, 1, 0, 0, 0, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1
};


// 스테이지
BYTE g_byArrayMakePropertiesStage_1[40 * 62] = {

	//	        /         /         /         /         /         /         /         /         /         /         /         /    
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,//
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,//
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,//
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,//
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,//
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
};

BYTE g_byArrayMakePropertiesStage_2[40 * 62] = {
	//	        /         /         /         /         /         /         /         /         /         /         /         /    
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,//
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,//
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,//
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,//
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
};

BYTE g_byArrayMakePropertiesStage_3[40 * 62] = {
	//	        /         /         /         /         /         /         /         /         /         /         /         /    
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
		1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
		1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,//
		1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
		1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,//
		1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,
		1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,
		1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
};

BYTE g_byArrayMakePropertiesStage_4[40 * 62] = {
	//	        /         /         /         /         /         /         /         /         /         /         /         /    
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,//
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,//
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,//
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
};

BYTE g_byArrayMakePropertiesStage_5[98 * 144] = {
	//          /		  /			/		  /			/		  /			/		  /			/		  //		/		  /			/		  /			/		  /			/		  /			/		  //		/		  /			/		  /			/		  /			/		  /
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,/////////////////////////////
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
};

BYTE g_byArrayMakePropertiesStage_6[60 * 95] = {
	//          /		  /			/		  /			/		  /			/		  /			/		  //		/		  /			/		  /			/		  /			/		  /			/		  //		/		  /			/		  /			/		  /			/		  /
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,0,0,0,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,0,0,0,0,0,0,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,3,3,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,0,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,3,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,3,3,3,3,3,3,3,0,0,0,0,0,0,3,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,3,0,0,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,3,3,0,0,0,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,3,3,0,0,0,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,3,3,0,0,0,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,3,3,0,0,0,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,3,3,0,0,0,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,3,3,1,0,0,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,3,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,3,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,1,1,1,1,1,1,
		1,1,1,1,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,1,1,1,1,
		1,1,1,1,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,1,1,1,
		1,1,1,1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,//
		1,1,1,1,1,1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,
		1,1,1,1,1,1,1,1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,1,1,1,1,3,3,3,0,0,0,0,0,0,0,0,0,0,0,3,3,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,1,1,1,1,3,3,3,0,0,0,0,0,0,3,3,3,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,1,1,1,1,1,1,1,1,1,1,1,3,3,0,0,0,0,3,3,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,3,3,3,0,0,0,0,0,0,0,0,0,0,0,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,0,0,0,0,3,0,0,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,//
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
};


// 플레이어
BYTE g_byArrayMAkePlayerWakeUpProperties[6 * 7] = {
	1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 1, 1, 1,
	2, 2, 2, 2, 1, 1, 1,
	2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1
};

// 물체들
BYTE g_byArrayMakePropertiesObject_0[7 * 8] = {
	2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2
};

BYTE g_byArrayMakePropertiesObject_1[6 * 4] = {
	2,2,2,2,
	2,2,2,2,
	2,2,2,2,
	2,2,2,2,
	2,2,2,2,
	2,2,2,2
};

BYTE g_byArrayMakePropertiesObject_2[6 * 4] = {
	2,2,2,2,
	2,2,2,2,
	2,2,2,2,
	2,2,2,2,
	2,2,2,2,
	2,2,2,2
};

BYTE g_byArrayMakePropertiesObject_3[5 * 7] = {
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,
};

BYTE g_byArrayMakePropertiesObject_4[5 * 9] = {
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,3,3,3,3,2,
	1,1,3,3,3,3,2,
	1,1,1,1,1,1,1
};

BYTE g_byArrayMakePropertiesObject_5[7 * 6] = {
	2,2,2,2,2,2,
	2,2,2,2,2,2,
	2,2,2,2,2,2,
	2,2,2,2,2,2,
	2,2,2,2,2,2,
	2,2,2,2,2,2,
	2,2,2,2,2,2
};

BYTE g_byArrayMakePropertiesObject_6[17 * 9] = {
	1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,
	1,3,3,3,3,3,3,3,1,
	1,3,3,3,3,3,3,3,1,
	1,1,3,3,3,3,1,1,1,
	1,1,1,1,1,1,1,1,1
};

BYTE g_byArrayMakePropertiesObject_7[20 * 4] = {
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	3,3,3,1,
	1,3,3,1
};

BYTE g_byArrayMakePropertiesObject_8[6 * 5] = {
	1,1,1,1,1,
	1,1,1,1,1,
	1,1,1,1,1,
	1,1,1,1,1,
	1,3,3,1,1,
	1,1,1,1,1
};

BYTE g_byArrayMakePropertiesObject_9[8 * 7] = {
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2
};

BYTE g_byArrayMakePropertiesObject_10[3 * 4] = {
	2,2,2,2,
	2,2,2,2,
	2,2,2,2
};

BYTE g_byArrayMakePropertiesObject_11[4 * 6] = {
	2,2,2,2,2,2,
	2,2,2,2,2,2,
	2,2,2,2,2,2,
	2,2,2,2,2,2
};

BYTE g_byArrayMakePropertiesObject_12[4 * 7] = {
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2
};

BYTE g_byArrayMakePropertiesObject_13[19 * 14] = {
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,3,3,3,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
};

BYTE g_byArrayMakePropertiesObject_14[3 * 3] = {
	2,2,2,
	2,2,2,
	2,2,2
};

BYTE g_byArrayMakePropertiesObject_15[7 * 13] = {
	2,2,2,2,2,2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,2,2,2,2,2
};

BYTE g_byArrayMakePropertiesObject_16[4 * 4] = {
	2,2,2,2,
	2,2,2,2,
	2,2,2,2,
	2,2,2,2
};

BYTE g_byArrayMakePropertiesObject_17[3 * 5] = {
	2,2,2,2,2,
	2,2,2,2,2,
	2,2,2,2,2
};

BYTE g_byArrayMakePropertiesObject_18[17 * 4] = {
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,3,1,1,
	1,3,1,1,
	1,1,1,1
};

BYTE g_byArrayMakePropertiesObject_19[3 * 4] = {
	2,2,2,2,
	2,2,2,2,
	2,2,2,2
};

BYTE g_byArrayMakePropertiesObject_20[4 * 5] = {
	1,1,1,1,1,
	1,1,1,1,1,
	1,3,3,3,1,
	1,1,1,1,1
};

BYTE g_byArrayMakePropertiesObject_21[4 * 5] = {
	1,1,1,1,1,
	1,1,1,1,1,
	1,3,3,3,1,
	1,1,1,1,1
};

BYTE g_byArrayMakePropertiesObject_22[18 * 7] = {
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,3,3,3,3,3,1,
	1,3,3,3,3,3,1,
	1,1,1,3,3,1,1
};

BYTE g_byArrayMakePropertiesObject_23[18 * 7] = {
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,3,3,3,3,3,1,
	1,3,3,3,3,3,1,
	1,1,1,3,3,1,1
};

BYTE g_byArrayMakePropertiesObject_24[10 * 6] = {
	1,1,1,1,1,1,
	1,1,1,1,1,1,
	1,1,1,1,1,1,
	1,1,1,1,1,1,
	1,1,1,1,1,1,
	1,1,1,1,1,1,
	1,1,1,1,1,1,
	1,1,1,1,1,1,
	3,3,3,3,3,1,
	1,3,3,3,1,1
};

BYTE g_byArrayMakePropertiesObject_25[4 * 7] = {
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,
	2,2,2,2,2,2,2
};

BYTE g_byArrayMakePropertiesObject_26[20 * 20] = {
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,3,3,3,3,3,3,3,3,1,1,1,1,1,1,
	1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,
	1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,
	1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,
	1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,
	1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,
	1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,
	1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,
	1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,
	1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,
	1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,
	1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,
	1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,
	1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,
	1,1,1,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
};

BYTE g_byArrayMakePropertiesObject_27[6 * 6] = {
	2,2,2,2,2,2,
	2,2,2,2,2,2,
	2,2,2,2,2,2,
	2,2,2,2,2,2,
	2,2,2,2,2,2,
	2,2,2,2,2,2
};

BYTE g_byArrayMakePropertiesObject_28[10 * 12] = {
	2,2,2,2,2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,2,2,2,2
};


//브로큰
BYTE g_byArrayMakePropertiesBroken_27[4 * 2] = {
	1,1,
	1,1,
	1,3,
	1,1
};

BYTE g_byArrayMakePropertiesBroken_28[7 * 5] = {
	1,1,1,1,1,
	1,1,1,1,1,
	1,1,1,1,1,
	1,1,1,1,1,
	1,1,1,1,1,
	1,3,3,3,1,
	1,3,3,3,1
};

BYTE g_byArrayMakePropertiesBroken_29[6 * 7] = {
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,3,3,3,3,3,1,
	1,3,3,3,3,3,1,
	1,1,1,3,1,1,1
};

BYTE g_byArrayMakePropertiesBroken_30[6 * 8] = {
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
	1,3,3,3,3,3,3,1,
	1,3,3,3,3,3,1,1,
	1,3,3,3,3,3,1,1,
	1,1,1,1,1,1,1,1
};

BYTE g_byArrayMakePropertiesBroken_31[6 * 7] = {
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,3,3,3,1,
	1,1,3,3,3,3,1,
	3,3,3,1,1,1,1,
	3,3,1,1,1,1,1
};

BYTE g_byArrayMakePropertiesBroken_32[6 * 7] = {
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,3,3,3,3,3,1,
	3,3,3,3,3,3,1,
	1,1,1,3,3,1,1
};

BYTE g_byArrayMakePropertiesBroken_33[5 * 6] = {
	1,1,1,1,1,1,
	1,1,1,1,1,1,
	1,1,1,1,1,1,
	3,3,3,3,3,3,
	1,3,3,3,1,1
};

BYTE g_byArrayMakePropertiesBroken_34[5 * 7] = {
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,3,3,3,3,3,1,
	3,3,3,3,3,3,1,
	1,1,1,1,1,1,1
};

BYTE g_byArrayMakePropertiesBroken_35[3 * 3] = {
	1,1,1,
	3,3,3,
	1,1,1,
};

BYTE g_byArrayMakePropertiesBroken_36[4 * 5] = {
	1,1,1,1,1,
	1,1,1,1,1,
	3,3,3,3,1,
	1,3,3,3,1
};

BYTE g_byArrayMakePropertiesBroken_37[4 * 5] = {
	1,1,1,1,1,
	1,1,1,1,1,
	3,3,3,3,1,
	1,3,3,3,1
};

BYTE g_byArrayMakePropertiesBroken_38[5 * 6] = {
	1,1,1,1,1,1,
	1,1,1,1,1,1,
	1,3,3,3,3,1,
	3,3,3,1,1,1
};

BYTE g_byArrayMakePropertiesBroken_39[4 * 3] = {
	1,1,1,
	1,1,1,
	1,3,1,
	1,1,1
};

BYTE g_byArrayMakePropertiesBroken_40[6 * 7] = {
	1,1,1,1,1,1,1,
	1,1,1,1,1,3,1,
	1,1,1,3,3,3,1,
	1,3,3,3,3,1,1,
	1,3,3,1,1,1,1,
	1,1,1,1,1,1,1
};

BYTE g_byArrayMakePropertiesBroken_41[2 * 3] = {
	1,1,1,
	3,3,3,
};


// 적
//소
BYTE g_byArrayMakePropertiesEnemy_0[7 * 10] = {
	1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,
	1,1,1,2,2,2,1,1,1,1,
	1,1,1,2,2,2,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,//
	1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1
};
//검은새
BYTE g_byArrayMakePropertiesEnemy_1[6 * 7] = {
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	1,1,2,2,2,1,1,
	1,1,2,2,2,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1
};
//하얀새
BYTE g_byArrayMakePropertiesEnemy_2[5 * 7] = {
	1,1,1,1,1,1,1,
	1,1,2,2,2,1,1,
	1,1,2,2,2,1,1,
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1
};
//터렛
BYTE g_byArrayMakePropertiesEnemy_3[5 * 4] = {
	1,1,1,1,
	1,1,1,1,
	1,1,1,1,
	1,2,2,1,
	1,1,1,1//
};
//우라보스
BYTE g_byArrayMakePropertiesEnemy_4[10 * 13] = {
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,2,2,2,1,1,1,1,1,
	1,1,1,1,1,2,2,2,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1
};
//우라석궁
BYTE g_byArrayMakePropertiesEnemy_5[10 * 13] = {
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,2,2,1,1,1,1,1,1,
	1,1,1,1,1,2,2,1,1,1,1,1,1,
	1,1,1,1,1,2,2,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1
};
//우라잡몹
BYTE g_byArrayMakePropertiesEnemy_6[10 * 13] = {
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,2,2,1,1,1,1,1,1,
	1,1,1,1,1,2,2,1,1,1,1,1,1,
	1,1,1,1,1,1,2,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1
};
//우라총
BYTE g_byArrayMakePropertiesEnemy_7[20 * 26] = {
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,2,2,1,1,1,1,1,1,
	1,1,1,1,1,2,2,1,1,1,1,1,1,
	1,1,1,1,1,2,2,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1
};
//우라칼
BYTE g_byArrayMakePropertiesEnemy_8[20 * 26] = {
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,2,2,1,1,1,1,1,1,
	1,1,1,1,1,2,2,1,1,1,1,1,1,
	1,1,1,1,1,1,2,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1
};



Object *g_TestObject;


// 이 코드 모듈에 포함된 함수의 선언을 전달합니다:
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);				// 윈도우
LRESULT CALLBACK    ChangeSizeProc(HWND, UINT, WPARAM, LPARAM);			// 크기 변경 다이얼로그
LRESULT CALLBACK    TriggerProc(HWND, UINT, WPARAM, LPARAM);			// 트리거 다이얼로그
LRESULT CALLBACK    CreateTriggerProc(HWND, UINT, WPARAM, LPARAM);		// 트리거 다이얼로그
void Update();					// 업데이트
void LoadSprite();				// 스프라이트 로드
void InitTile();				// 타일 초기화
void KeyProcess();				// 키 처리
void InsertionSort();			// 삽입 정렬
void SaveProcess();				// 세이브 처리
void LoadProcess();				// 불러오기 처리
void UTF8toUTF16(const char *szText, WCHAR *szBuff, int iBuffLen);
void UpdateProperties();
bool CheckTile(double dTileY, double dTileX);

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
	_In_opt_ HINSTANCE hPrevInstance,
	_In_ LPWSTR    lpCmdLine,
	_In_ int       nCmdShow)
{
	UNREFERENCED_PARAMETER(hPrevInstance);
	UNREFERENCED_PARAMETER(lpCmdLine);

	// TODO: 여기에 코드를 입력합니다.


	g_ScreenDib = new CScreenDib(df_WIN_MAIN_SIZE_WIDTH, df_WIN_MAIN_SIZE_HEIGHT, 32);
	g_cSprite = new CSpriteDib(500, 0xff00ff);
	g_ObjectList = new CList<Object *>;

	// 스프라이트 로드
	LoadSprite();
	// 타일 초기화
	InitTile();

	//출력 버퍼 포인터 및 정보 얻음
	g_bypDest = g_ScreenDib->GetDibBuffer();
	g_iDestWidth = g_ScreenDib->GetWidth();
	g_iDestHeight = g_ScreenDib->GetHeight();
	g_iDestPitch = g_ScreenDib->GetPitch();
	g_stpDibInfo = g_ScreenDib->GetDibInfo();

	// 카메라
	g_CameraRect.left = 0;
	g_CameraRect.top = 0;
	g_CameraRect.right = g_iDestWidth;
	g_CameraRect.bottom = g_iDestHeight;


	Object * newObject;

	// 배경
	g_ObjectStageMap = new ObjectStageMap(g_iMapWidth, g_iMapHeight);
	g_ObjectList->push_back(g_ObjectStageMap);

	// 타일 메뉴
	g_ObjectMenu = new ObjectMenu(600, 50);
	g_ObjectList->push_back(g_ObjectMenu);

	// 마우스 지시자
	g_MousePointer = new ObjectMousePointer(0, 0);
	g_ObjectList->push_back(g_MousePointer);

	// 사이즈 변경 다이얼로그
	g_hWndChangeSize = CreateDialog(hInstance, MAKEINTRESOURCE(IDD_CHANGE_SIZE), NULL, ChangeSizeProc);
	// 트리거 다이얼로그
	g_hWndTrigger = CreateDialog(hInstance, MAKEINTRESOURCE(IDD_TRIGGER), NULL, TriggerProc);
	// 트리거 생성 다이얼로그
	g_hWndCreateTrigger = CreateDialog(hInstance, MAKEINTRESOURCE(IDD_CREATE_TRIGGER), NULL, CreateTriggerProc);


	HWND hListBoxNEED;					// 조건 리스트 핸들
	HWND hListBoxACTION;				// 결과 리스트 핸들
	int iIndex;							// 리스트 인덱스
	int iData;

	// 리스트 박스 핸들 얻기
	hListBoxNEED = GetDlgItem(g_hWndCreateTrigger, IDC_LIST_NEED);
	hListBoxACTION = GetDlgItem(g_hWndCreateTrigger, IDC_LIST_ACTION);

	
	// 리스트 박스에 문자열 추가
	iIndex = SendMessage(hListBoxNEED, LB_ADDSTRING, 0, (LPARAM)L"없음");
	SendMessage(hListBoxNEED, LB_SETITEMDATA, (WPARAM)iIndex, (LPARAM)NEED_EMPT);
	iIndex = SendMessage(hListBoxNEED, LB_ADDSTRING, 0, (LPARAM)L"트리거 위에");
	SendMessage(hListBoxNEED, LB_SETITEMDATA, (WPARAM)iIndex, (LPARAM)NEED_ON_TRIGGER);
	
	//iData = SendMessage(hListBoxNEED, LB_GETITEMDATA, iIndex, 0);





	WNDCLASSEXW wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);

	// 메인 윈도우
	wcex.style = CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc = WndProc;
	wcex.cbClsExtra = 0;
	wcex.cbWndExtra = 0;
	wcex.hInstance = hInstance;
	wcex.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MY20190718BASTIONMAPTOOL));
	wcex.hCursor = LoadCursor(nullptr, IDC_ARROW);
	wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
	wcex.lpszMenuName = MAKEINTRESOURCEW(IDC_MY20190718BASTIONMAPTOOL);
	wcex.lpszClassName = df_WIN_PARENT_CLASS_NAME;
	wcex.hIconSm = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

	RegisterClassExW(&wcex);


	// 응용 프로그램 초기화를 수행합니다:
	g_hInst = hInstance; // 인스턴스 핸들을 전역 변수에 저장합니다.

	g_hWnd = CreateWindowW(df_WIN_PARENT_CLASS_NAME, df_WIN_PARENT_TITLE_NAME, WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, CW_USEDEFAULT, df_WIN_MAIN_SIZE_WIDTH, df_WIN_MAIN_SIZE_HEIGHT, nullptr, nullptr, hInstance, nullptr);

	if (!g_hWnd)
	{
		return FALSE;
	}

	ShowWindow(g_hWnd, nCmdShow);
	UpdateWindow(g_hWnd);


	MSG msg;

	// 기본 메시지 루프입니다:
	 // 기본 메시지 루프입니다:
	while (1) {
		if (PeekMessage(&msg, nullptr, 0, 0, PM_REMOVE))
		{
			if (msg.message == WM_QUIT)
				break;
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
		else {
			Update();
			Sleep(1);
		}
	}


	CList<Object*>::iterator iter;
	CList<Object*>::iterator iter_end;

	//--------------------------------------
	// 메모리 정리
	//--------------------------------------
	iter = g_ObjectList->begin();
	iter_end = g_ObjectList->end();
	while (iter != iter_end) {
		delete *iter;
		iter = g_ObjectList->erase(iter);
	}

	delete g_ObjectList;
	delete g_cSprite;
	delete g_ScreenDib;

	for (auto& pTile : g_vecTile)
		delete pTile;
	g_vecTile.clear();


	return (int)msg.wParam;
}





//
//  함수: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  용도: 주 창의 메시지를 처리합니다.
//
//  WM_COMMAND  - 응용 프로그램 메뉴를 처리합니다.
//  WM_PAINT    - 주 창을 그립니다.
//  WM_DESTROY  - 종료 메시지를 게시하고 반환합니다.
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	CList<Object*>::iterator iter;
	CList<Object*>::iterator iter_end;
	Object * ObjectTemp;
	int iMouseX;
	int iMouseY;
	int iTileBlockX;
	int iTileBlockY;
	wchar_t szWidth[255];
	wchar_t szHeight[255];


	switch (message)
	{
	case WM_PAINT:
	{
		RECT DCRect;
		GetClientRect(g_hWnd, &DCRect);

		// 윈도우 사이즈가 바뀌면
		if (DCRect.right != g_DCRect.right || DCRect.bottom != g_DCRect.bottom) {
			g_DCRect = DCRect;
			// 스크린 크기 변경
			g_ScreenDib->ResizeScreenDib(DCRect.right, DCRect.bottom, 32);
			g_bypDest = g_ScreenDib->GetDibBuffer();
			g_iDestWidth = g_ScreenDib->GetWidth();
			g_iDestHeight = g_ScreenDib->GetHeight();
			g_iDestPitch = g_ScreenDib->GetPitch();
			g_stpDibInfo = g_ScreenDib->GetDibInfo();

			// 카메라
			g_CameraRect.right = g_CameraRect.left + g_iDestWidth;
			g_CameraRect.bottom = g_CameraRect.top + g_iDestHeight;

			// 스테이지 맵
			g_ObjectStageMap->m_dRight = g_iDestWidth;
			g_ObjectStageMap->m_dBottom = g_iDestHeight;
		}


		PAINTSTRUCT ps;
		HDC hdc = BeginPaint(hWnd, &ps);
		// TODO: 여기에 hdc를 사용하는 그리기 코드를 추가합니다...
		EndPaint(hWnd, &ps);
	}
	break;
	case WM_MOUSEMOVE:
		//--------------------------------------
		// 마우스 이동
		//--------------------------------------
		iMouseX = g_iMouseX;
		iMouseY = g_iMouseY;
		// 카메라 위치 + 화면 좌표
		g_iMouseX = g_CameraRect.left + LOWORD(lParam);
		g_iMouseY = g_CameraRect.top + HIWORD(lParam);

		// 마우스가 UI위에 있냐
		if (g_ObjectMenu->CheckOnMouse()) {
			g_bOnUIMouse = true;
		}
		else {
			g_bOnUIMouse = false;
		}

		// 마우스 클릭 중 (드래그)
		if (MK_LBUTTON & wParam) {
			switch (g_MouseClickObject) {
			case MOUSE_CLICK_MENU_TITLE_BAR:
				iMouseX = iMouseX - g_iMouseX;
				iMouseY = iMouseY - g_iMouseY;

				g_ObjectMenu->Move(iMouseX, iMouseY);
				break;
			case MOUSE_CLICK_MENU_SCROLL_BAR:
				iMouseY = iMouseY - g_iMouseY;

				g_MenuElementListScrollBar->ScrollMove(iMouseY);
				break;
			}
		}

		g_MousePointer->m_bRedOption = false;

		switch (g_MouseState)
		{
		case MOUSE_STATE_EMPT:

			break;
		case MOUSE_STATE_TILE_MAKE_4:
			iTileBlockX = g_iMouseX / df_TILE_WIDTH;
			iTileBlockY = g_iMouseY / df_TILE_HEIGHT;

			//--------------------------------------
			// 홀수짝수 구분
			// 홀수 번째 위치가 다름
			//--------------------------------------
			if (iTileBlockY % 2) {
				if (iTileBlockX % 2) {
					iTileBlockY = iTileBlockY + 1;
				}
			}
			else {
				if (!(iTileBlockX % 2)) {
					iTileBlockY = iTileBlockY + 1;
				}
			}

			g_MousePointer->m_dX = iTileBlockX * df_TILE_WIDTH;
			g_MousePointer->m_dY = iTileBlockY * df_TILE_HEIGHT;

			break;
		case MOUSE_STATE_TILE_MAKE_1:
			// 클릭한 타일 좌표 검사
			for (auto& pTile : g_vecTile)
			{
				if (CheckTile(pTile->dPosY, pTile->dPosX))
				{
					g_MousePointer->m_dX = pTile->dPosX;
					g_MousePointer->m_dY = pTile->dPosY;
					break;
				}
			}

			break;
		case MOUSE_STATE_STAGE_MAKE:
		case MOUSE_STATE_PLAYER_MAKE:
		case MOUSE_STATE_OBJECT_MAKE:
		case MOUSE_STATE_BROKEN_MAKE:
		case MOUSE_STATE_ENEMY_MAKE:
			g_MousePointer->m_dX = g_iMouseX / df_TILE_PROPERTIES_SIZE * df_TILE_PROPERTIES_SIZE;
			g_MousePointer->m_dY = g_iMouseY / df_TILE_PROPERTIES_SIZE * df_TILE_PROPERTIES_SIZE;

			if (g_ObjectStageMap->CheckProperties(g_iMouseX / df_TILE_PROPERTIES_SIZE, g_iMouseY / df_TILE_PROPERTIES_SIZE)) {
				g_MousePointer->m_bRedOption = false;
			}
			else {
				g_MousePointer->m_bRedOption = true;
			}

			break;

		case MOUSE_STATE_ERASE:	// 지우개
			iTileBlockX = g_iMouseX / df_TILE_WIDTH;
			iTileBlockY = g_iMouseY / df_TILE_HEIGHT;

			//--------------------------------------
			// 홀수짝수 구분
			// 홀수 번째 위치가 다름
			//--------------------------------------
			if (iTileBlockY % 2) {
				if (iTileBlockX % 2) {
					iTileBlockY = iTileBlockY + 1;
				}
				else {

				}
			}
			else {
				if (iTileBlockX % 2) {

				}
				else {
					iTileBlockY = iTileBlockY + 1;
				}
			}

			g_MousePointer->m_dX = iTileBlockX * df_TILE_WIDTH;
			g_MousePointer->m_dY = iTileBlockY * df_TILE_HEIGHT;

			break;
		default:
			break;
		}

		break;
	case WM_LBUTTONDOWN:
		//--------------------------------------
		// 마우스 왼쪽 버튼 DOWN
		//--------------------------------------
		// 카메라 위치 + 화면 좌표
		g_iMouseX = g_CameraRect.left + LOWORD(lParam);
		g_iMouseY = g_CameraRect.top + HIWORD(lParam);

		//--------------------------------------
		// 마우스 클릭 체크
		//--------------------------------------
		iter = g_ObjectList->rbegin();
		iter_end = g_ObjectList->head();
		while (iter != iter_end) {
			ObjectTemp = *iter;
			if (ObjectTemp->Click()) {
				break;
			}
			--iter;
		}


		break;
	case WM_LBUTTONUP:
		//--------------------------------------
		// 마우스 왼쪽 버튼 UP
		//--------------------------------------
		// 카메라 위치 + 화면 좌표
		g_iMouseX = g_CameraRect.left + LOWORD(lParam);
		g_iMouseY = g_CameraRect.top + HIWORD(lParam);
		g_MouseClickObject = MOUSE_CLICK_EMPT;
		break;
	case WM_COMMAND:
		//--------------------------------------
		// 커맨드 입력 처리
		//--------------------------------------
		switch (LOWORD(wParam)) {
		case ID_SAVE:
			SaveProcess();
			break;
		case ID_LOAD:
			LoadProcess();
			break;
		case ID_CHANGE_SIZE:
			wsprintf(szWidth, L"%d", g_iMapWidth);
			wsprintf(szHeight, L"%d", g_iMapHeight);

			// 텍스트 필드 채우기
			SetWindowText(GetDlgItem(g_hWndChangeSize, IDC_WIDTH), szWidth);
			SetWindowText(GetDlgItem(g_hWndChangeSize, IDC_HEIGHT), szHeight);

			ShowWindow(g_hWndChangeSize, SW_SHOWDEFAULT);
			break;
		case ID_TRIGGER:
			ShowWindow(g_hWndTrigger, SW_SHOWDEFAULT);
			break;
		}
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}




LRESULT ChangeSizeProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	wchar_t szWidth[255];
	wchar_t szHeight[255];

	switch (message) {
	case WM_INITDIALOG:
		return TRUE;
	case WM_COMMAND:
		switch (LOWORD(wParam)) {
		case IDOK:
			GetWindowText(GetDlgItem(g_hWndChangeSize, IDC_WIDTH), szWidth, 255);
			GetWindowText(GetDlgItem(g_hWndChangeSize, IDC_HEIGHT), szHeight, 255);

			g_iMapWidth = _wtoi(szWidth);
			g_iMapHeight = _wtoi(szHeight);
			// 사이즈 변경
			g_ObjectStageMap->ResizeMap(g_iMapWidth, g_iMapHeight);
			// 속성 값 재배열 해야되는 처리...
			UpdateProperties();


			EndDialog(hDlg, TRUE);
			SetForegroundWindow(g_hWnd);
			return TRUE;
		case IDCANCEL:

			EndDialog(hDlg, TRUE);
			SetForegroundWindow(g_hWnd);
			return TRUE;
		}
		break;
	case WM_CLOSE:
		EndDialog(hDlg, TRUE);
		SetForegroundWindow(g_hWnd);
		return TRUE;
	}

	return FALSE;
}



// 트리거 다이얼로그
LRESULT TriggerProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	switch (message) {
	case WM_INITDIALOG:
		return TRUE;
	case WM_COMMAND:
		switch (LOWORD(wParam)) {
		case IDC_CREATE_TRIGGER:
			ShowWindow(g_hWndCreateTrigger, SW_SHOWDEFAULT);
			return TRUE;
		case IDC_OK:
			EndDialog(hDlg, TRUE);
			SetForegroundWindow(g_hWnd);
			return TRUE;
		}
		break;
	case WM_CLOSE:
		EndDialog(hDlg, TRUE);
		SetForegroundWindow(g_hWnd);
		return TRUE;
	}

	return FALSE;
}


// 트리거 생성 다이얼로그
LRESULT CreateTriggerProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	int iSellectIndex;
	int iData;
	HWND hListBox;				// 리스트 핸들
	HWND hCombo;				// 콤보 핸들
	wchar_t Items[][15] = { L"Apple",L"Orange",L"Melon",L"Graph",L"Strawberry" };

	switch (message) {
	case WM_INITDIALOG:
		return TRUE;
	case WM_COMMAND:
		switch (LOWORD(wParam)) {
		case IDC_LIST_NEED:

			iSellectIndex = SendMessage((HWND)lParam, LB_GETCURSEL, 0, 0);
			hListBox = GetDlgItem(g_hWndCreateTrigger, IDC_LIST_NEED);
			iData = SendMessage(hListBox, LB_GETITEMDATA, iSellectIndex, 0);

			switch (iData) {
			case NEED_EMPT:
 				hCombo = GetDlgItem(g_hWndCreateTrigger, IDC_COMBOBOX);
				DestroyWindow(hCombo);
				break;
			case NEED_ON_TRIGGER:
				hCombo = CreateWindow(L"combobox", NULL, WS_CHILD | WS_VISIBLE | CBS_DROPDOWNLIST,
					300, 100, 100, 125, g_hWndCreateTrigger, (HMENU)IDC_COMBOBOX, g_hInst, NULL);
				for (int i = 0; i < 5; i++) {
					SendMessage(hCombo, CB_ADDSTRING, 0, (LPARAM)Items[i]);
				}
				
				break;
			}

			return TRUE;
		case IDC_CREATE_TRIGGER:
			EndDialog(hDlg, TRUE);
			SetForegroundWindow(g_hWndTrigger);
			return TRUE;
		case IDC_CANCEL:
			EndDialog(hDlg, TRUE);
			SetForegroundWindow(g_hWndTrigger);
			return TRUE;
		}
		break;
	case WM_CLOSE:
		EndDialog(hDlg, TRUE);
		SetForegroundWindow(g_hWndTrigger);
		return TRUE;
	}

	return FALSE;
}




void Update()
{
	CList<Object*>::iterator iter;
	CList<Object*>::iterator iter_end;
	Object * ObjectTemp;
	
	//--------------------------------------
	// 키 입력 처리
	//--------------------------------------
	KeyProcess();

	//--------------------------------------
	// 정렬
	//--------------------------------------
	InsertionSort();

	//--------------------------------------
	// 오브젝트 처리
	//--------------------------------------
	iter = g_ObjectList->begin();
	iter_end = g_ObjectList->end();
	while (iter != iter_end) {
		ObjectTemp = *iter;
		if (ObjectTemp->Action()) {
			ObjectTemp = *iter;
			iter = g_ObjectList->erase(iter);
			delete ObjectTemp;
			continue;

		}
		ObjectTemp->Draw();
		++iter;
	}

	//--------------------------------------
	// 속성 업데이트
	//--------------------------------------
	if (g_bUpdateProperties) {
		UpdateProperties();
		// 한번만 업데이트
		g_bUpdateProperties = false;
	}


	//------------------------------------------------------------
	// ScreenDib 를 화면으로 플립
	//------------------------------------------------------------
	//g_ScreenDib.DrawBuffer(g_hWnd);

	double dCntX;
	double dCntY;
	double dCntXX;
	double dCntYY;
	double dInclination;			// 기울기
	bool bFlag;
	HDC hdc;
	HDC hdcCopy;
	HBITMAP hBit;
	HBITMAP hOBit;

	hdc = GetDC(g_hWnd);
	hdcCopy = CreateCompatibleDC(hdc);
	hBit = (HBITMAP)CreateCompatibleBitmap(hdc, g_iDestWidth, g_iDestWidth);
	hOBit = (HBITMAP)SelectObject(hdcCopy, hBit);

	StretchDIBits(hdcCopy, 0, 0, g_iDestWidth, g_iDestHeight, 0, 0, g_iDestWidth, g_iDestHeight, g_bypDest,
		g_stpDibInfo, DIB_RGB_COLORS, SRCCOPY);



	// 타일 격자
	if (g_bTileOption) {
		dCntX = 0 - g_CameraRect.left;
		dCntY = df_TILE_HEIGHT - g_CameraRect.top;
		dCntXX = df_TILE_WIDTH - g_CameraRect.left;
		dCntYY = 0 - g_CameraRect.top;
		bFlag = false;
		// 기울기
		// y1 - y2 / x1 - x2
		dInclination = (dCntY - dCntYY) / (dCntX - dCntXX);

		while (dCntY < g_iMapHeight) {
			MoveToEx(hdcCopy, dCntX, dCntY, NULL);
			LineTo(hdcCopy, dCntXX, dCntYY);

			dCntY = dCntY + df_TILE_HEIGHT;
			dCntXX = dCntXX + df_TILE_WIDTH;
		}

		dCntY = dCntY - df_TILE_HEIGHT;
		dCntYY = g_iMapHeight;
		// 직선 방정식
		// y - y1 = a(x - x1)
		// dCntYY - dCntY = -dInclination * (dCntXX + 0)
		// dCntYY - dCntY = -dInclination * dCntXX
		dCntXX = (dCntYY - dCntY) / -dInclination - g_CameraRect.left;
		while (dCntY > -g_iMapHeight) {
			MoveToEx(hdcCopy, dCntX, dCntY, NULL);
			LineTo(hdcCopy, dCntXX, dCntYY);

			dCntY = dCntY - df_TILE_HEIGHT;
			dCntXX = dCntXX + df_TILE_WIDTH;
		}
	}

	
	wchar_t szText[256];
	// 마우스 좌표
	//swprintf_s(szText, L"X : %d, Y : %d", g_iMouseX, g_iMouseY);
	//TextOut(hdcCopy, 10, 10, szText, wcsnlen_s(szText, 256));


	// 타일 속성
	int iWidth;
	int iX = 0;
	int iY = 0;
	int iCnt = 0;
	iWidth = g_ObjectStageMap->m_iPropertiesWidth;
	if (g_bPropertiesOption) {
		while (iCnt < g_ObjectStageMap->m_iPropertiesSize) {
			iX = (iCnt % iWidth) * 25 - g_CameraRect.left;
			iY = (iCnt / iWidth) * 25 - g_CameraRect.top;

			if (iX < 0 || iY < 0) {
				++iCnt;
				continue;
			}
			else if (iX > g_CameraRect.right || iY > g_CameraRect.bottom) {
				++iCnt;
				continue;
			}


			swprintf_s(szText, L"%d", g_ObjectStageMap->m_bypMapProperties[iCnt]);
			TextOut(hdcCopy, iX, iY, szText, wcsnlen_s(szText, 256));
			++iCnt;
		}
	}

	
	// 특정 오브젝트 렉트 출력
	//Rectangle(hdcCopy, g_TestObject->m_dLeft, g_TestObject->m_dTop, g_TestObject->m_dRight, g_TestObject->m_dBottom);

	BitBlt(hdc, 0, 0, g_iDestWidth, g_iDestHeight, hdcCopy, 0, 0, SRCCOPY);

	hBit = (HBITMAP)SelectObject(hdcCopy, hOBit);
	DeleteObject(hBit);
	DeleteDC(hdcCopy);
	ReleaseDC(g_hWnd, hdc);
}

void LoadSprite()
{
	// 타일
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_0, L"image\\Tile0.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_1, L"image\\Tile1.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_2, L"image\\Tile2.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_3, L"image\\Tile3.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_4, L"image\\Tile4.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_5, L"image\\Tile5.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_6, L"image\\Tile6.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_7, L"image\\Tile7.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_8, L"image\\Tile8.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_9, L"image\\Tile9.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_10, L"image\\Tile10.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_11, L"image\\Tile11.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_12, L"image\\Tile12.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_13, L"image\\Tile13.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_14, L"image\\Tile14.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_15, L"image\\Tile15.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_16, L"image\\Tile16.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_17, L"image\\Tile17.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_18, L"image\\Tile18.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_19, L"image\\Tile19.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_20, L"image\\Tile20.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_21, L"image\\Tile21.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_22, L"image\\Tile22.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_23, L"image\\Tile23.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_24, L"image\\Tile24.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_25, L"image\\Tile25.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_26, L"image\\Tile26.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_27, L"image\\Tile27.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_28, L"image\\Tile28.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_29, L"image\\Tile29.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_30, L"image\\Tile30.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_31, L"image\\Tile31.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_32, L"image\\Tile32.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_33, L"image\\Tile33.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_34, L"image\\Tile34.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_35, L"image\\Tile35.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_36, L"image\\Tile36.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_37, L"image\\Tile37.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_38, L"image\\Tile38.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_39, L"image\\Tile39.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_40, L"image\\Tile40.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_41, L"image\\Tile41.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_42, L"image\\Tile42.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_43, L"image\\Tile43.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_44, L"image\\Tile44.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_45, L"image\\Tile45.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_46, L"image\\Tile46.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_47, L"image\\Tile47.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_48, L"image\\Tile48.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_49, L"image\\Tile49.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_50, L"image\\Tile50.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_51, L"image\\Tile51.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_52, L"image\\Tile52.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_53, L"image\\Tile53.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_54, L"image\\Tile54.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_55, L"image\\Tile55.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_56, L"image\\Tile56.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_57, L"image\\Tile57.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_58, L"image\\Tile58.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_59, L"image\\Tile59.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_60, L"image\\Tile60.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_61, L"image\\Tile61.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_62, L"image\\Tile62.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_63, L"image\\Tile63.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_64, L"image\\Tile64.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_65, L"image\\Tile65.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_66, L"image\\Tile66.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_67, L"image\\Tile67.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_68, L"image\\Tile68.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_69, L"image\\Tile69.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_70, L"image\\Tile70.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_71, L"image\\Tile71.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_72, L"image\\Tile72.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_73, L"image\\Tile73.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_74, L"image\\Tile74.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_75, L"image\\Tile75.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_76, L"image\\Tile76.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_77, L"image\\Tile77.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_78, L"image\\Tile78.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_TILE_79, L"image\\Tile79.bmp", 100, 100);
	
	// 스테이지
	g_cSprite->LoadDibSprite(df_SPRITE_STAGE_1, L"image\\stage\\Stage1.bmp", 775, 500);
	g_cSprite->LoadDibSprite(df_SPRITE_STAGE_2, L"image\\stage\\Stage2.bmp", 775, 500);
	g_cSprite->LoadDibSprite(df_SPRITE_STAGE_3, L"image\\stage\\Stage3.bmp", 775, 500);
	g_cSprite->LoadDibSprite(df_SPRITE_STAGE_4, L"image\\stage\\Stage4.bmp", 775, 500);
	g_cSprite->LoadDibSprite(df_SPRITE_STAGE_5, L"image\\stage\\Stage5.bmp", 1800, 1225);
	g_cSprite->LoadDibSprite(df_SPRITE_STAGE_6, L"image\\stage\\Stage6.bmp", 928, 744);


	// 타일 아이콘
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_0, L"image\\Menu_Tile0.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_1, L"image\\Menu_Tile1.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_2, L"image\\Menu_Tile2.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_3, L"image\\Menu_Tile3.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_4, L"image\\Menu_Tile4.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_5, L"image\\Menu_Tile5.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_6, L"image\\Menu_Tile6.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_7, L"image\\Menu_Tile7.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_8, L"image\\Menu_Tile8.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_9, L"image\\Menu_Tile9.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_10, L"image\\Menu_Tile10.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_11, L"image\\Menu_Tile11.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_12, L"image\\Menu_Tile12.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_13, L"image\\Menu_Tile13.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_14, L"image\\Menu_Tile14.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_15, L"image\\Menu_Tile15.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_16, L"image\\Menu_Tile16.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_17, L"image\\Menu_Tile17.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_18, L"image\\Menu_Tile18.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_19, L"image\\Menu_Tile19.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_20, L"image\\Menu_Tile20.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_21, L"image\\Menu_Tile21.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_22, L"image\\Menu_Tile22.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_23, L"image\\Menu_Tile23.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_24, L"image\\Menu_Tile24.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_25, L"image\\Menu_Tile25.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_26, L"image\\Menu_Tile26.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_27, L"image\\Menu_Tile27.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_28, L"image\\Menu_Tile28.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_29, L"image\\Menu_Tile29.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_30, L"image\\Menu_Tile30.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_31, L"image\\Menu_Tile31.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_32, L"image\\Menu_Tile32.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_33, L"image\\Menu_Tile33.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_34, L"image\\Menu_Tile34.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_35, L"image\\Menu_Tile35.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_36, L"image\\Menu_Tile36.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_37, L"image\\Menu_Tile37.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_38, L"image\\Menu_Tile38.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_39, L"image\\Menu_Tile39.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_40, L"image\\Menu_Tile40.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_41, L"image\\Menu_Tile41.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_42, L"image\\Menu_Tile42.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_43, L"image\\Menu_Tile43.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_44, L"image\\Menu_Tile44.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_45, L"image\\Menu_Tile45.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_46, L"image\\Menu_Tile46.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_47, L"image\\Menu_Tile47.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_48, L"image\\Menu_Tile48.bmp", 0, 0);

	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_55, L"image\\Menu_Tile55.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_56, L"image\\Menu_Tile56.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_57, L"image\\Menu_Tile57.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_58, L"image\\Menu_Tile58.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE_59, L"image\\Menu_Tile59.bmp", 0, 0);

	// 스테이지 아이콘
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_STAGE_1, L"image\\stage\\Stage1_2.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_STAGE_2, L"image\\stage\\Stage2_2.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_STAGE_3, L"image\\stage\\Stage3_2.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_STAGE_4, L"image\\stage\\Stage4_2.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_STAGE_5, L"image\\stage\\Stage5_2.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_STAGE_6, L"image\\stage\\Stage6_2.bmp", 0, 0);
	

	// UI
	g_cSprite->LoadDibSprite(df_SPRITE_EMPT_SPRITE, L"image\\Empt_Sprite.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MAKE_TILE_SIZE_1, L"image\\Make_Tile_Size_1.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_MAKE_TILE_SIZE_4, L"image\\Make_Tile_Size_4.bmp", 100, 100);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TITLE_BAR, L"image\\TileMenu_TitleBar.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_TILE, L"image\\Menu_Tile.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_STAGE, L"image\\Menu_Stage.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_PLAYER, L"image\\Menu_Player.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT, L"image\\Menu_Object.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_BROKEN, L"image\\Menu_Broken.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_ENEMY, L"image\\Menu_Enemy.bmp", 0, 0);

	// 배경
	g_cSprite->LoadDibSprite(df_SPRITE_BACKGROUND_2, L"image\\Background_2.bmp", 0, 0);

	// 플레이어
	g_cSprite->LoadDibSprite(df_SPRITE_KID_WAKE_UP, L"image\\Kid_Wake_Up.bmp", 86, 64);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_KID_WAKE_UP, L"image\\Menu_Kid_Wake_Up.bmp", 0, 0);

	// 물체
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_0, L"image\\object\\0_2.bmp", 94, 86);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_1, L"image\\object\\1_2.bmp", 39, 65);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_2, L"image\\object\\2_2.bmp", 44, 69);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_3, L"image\\object\\3_2.bmp", 84, 57);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_4, L"image\\object\\4_2.bmp", 103, 51);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_5, L"image\\object\\5_2.bmp", 63, 76);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_6, L"image\\object\\6_2.bmp", 107, 201);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_7, L"image\\object\\7_2.bmp", 46, 250);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_8, L"image\\object\\8_2.bmp", 54, 65);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_9, L"image\\object\\9_2.bmp", 79, 88);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_10, L"image\\object\\10_2.bmp", 41, 35);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_11, L"image\\object\\11_2.bmp", 63, 46);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_12, L"image\\object\\12_2.bmp", 76, 49);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_13, L"image\\object\\13_2.bmp", 172, 227);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_14, L"image\\object\\14_2.bmp", 37, 34);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_15, L"image\\object\\15_2.bmp", 156, 79);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_16, L"image\\object\\16_2.bmp", 45, 45);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_17, L"image\\object\\17_2.bmp", 62, 38);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_18, L"image\\object\\18_2.bmp", 40, 202);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_19, L"image\\object\\19_2.bmp", 39, 31);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_20, L"image\\object\\20_2.bmp", 56, 41);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_21, L"image\\object\\21_2.bmp", 53, 41);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_22, L"image\\object\\22_2.bmp", 86, 159);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_23, L"image\\object\\23_2.bmp", 73, 124);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_24, L"image\\object\\24_2.bmp", 68, 122);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_25, L"image\\object\\25_2.bmp", 81, 47);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_26, L"image\\object\\26_2.bmp", 250, 250);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_27, L"image\\object\\27_2.bmp", 74, 69);
	g_cSprite->LoadDibSprite(df_SPRITE_OBJECT_28, L"image\\object\\28_2.bmp", 147, 120);


	// 물체 아이콘
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_0, L"image\\object\\0.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_1, L"image\\object\\1.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_2, L"image\\object\\2.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_3, L"image\\object\\3.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_4, L"image\\object\\4.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_5, L"image\\object\\5.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_6, L"image\\object\\6.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_7, L"image\\object\\7.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_8, L"image\\object\\8.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_9, L"image\\object\\9.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_10, L"image\\object\\10.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_11, L"image\\object\\11.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_12, L"image\\object\\12.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_13, L"image\\object\\13.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_14, L"image\\object\\14.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_15, L"image\\object\\15.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_16, L"image\\object\\16.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_17, L"image\\object\\17.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_18, L"image\\object\\18.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_19, L"image\\object\\19.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_20, L"image\\object\\20.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_21, L"image\\object\\21.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_22, L"image\\object\\22.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_23, L"image\\object\\23.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_24, L"image\\object\\24.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_25, L"image\\object\\25.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_26, L"image\\object\\26.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_27, L"image\\object\\27.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_OBJECT_28, L"image\\object\\28.bmp", 0, 0);

	// 부서지는 물체
	g_cSprite->LoadDibSprite(df_SPRITE_BROKEN_27, L"image\\broken\\27_2.bmp", 25, 45);
	g_cSprite->LoadDibSprite(df_SPRITE_BROKEN_28, L"image\\broken\\28_2.bmp", 58, 88);
	g_cSprite->LoadDibSprite(df_SPRITE_BROKEN_29, L"image\\broken\\29_2.bmp", 86, 70);
	g_cSprite->LoadDibSprite(df_SPRITE_BROKEN_30, L"image\\broken\\30_2.bmp", 96, 69);
	g_cSprite->LoadDibSprite(df_SPRITE_BROKEN_31, L"image\\broken\\31_2.bmp", 81, 68);
	g_cSprite->LoadDibSprite(df_SPRITE_BROKEN_32, L"image\\broken\\32_2.bmp", 83, 73);
	g_cSprite->LoadDibSprite(df_SPRITE_BROKEN_33, L"image\\broken\\33_2.bmp", 71, 62);
	g_cSprite->LoadDibSprite(df_SPRITE_BROKEN_34, L"image\\broken\\34_2.bmp", 79, 55);
	g_cSprite->LoadDibSprite(df_SPRITE_BROKEN_35, L"image\\broken\\35_2.bmp", 34, 30);
	g_cSprite->LoadDibSprite(df_SPRITE_BROKEN_36, L"image\\broken\\36_2.bmp", 58, 48);
	g_cSprite->LoadDibSprite(df_SPRITE_BROKEN_37, L"image\\broken\\37_2.bmp", 56, 47);
	g_cSprite->LoadDibSprite(df_SPRITE_BROKEN_38, L"image\\broken\\38_2.bmp", 63, 52);
	g_cSprite->LoadDibSprite(df_SPRITE_BROKEN_39, L"image\\broken\\39_2.bmp", 37, 47);
	g_cSprite->LoadDibSprite(df_SPRITE_BROKEN_40, L"image\\broken\\40_2.bmp", 86, 70);
	g_cSprite->LoadDibSprite(df_SPRITE_BROKEN_41, L"image\\broken\\41_2.bmp", 30, 24);

	// 적
	g_cSprite->LoadDibSprite(df_SPRITE_ENEMY_0, L"image\\enemy\\0.bmp", 117, 76);
	g_cSprite->LoadDibSprite(df_SPRITE_ENEMY_1, L"image\\enemy\\1.bmp", 81, 67);
	g_cSprite->LoadDibSprite(df_SPRITE_ENEMY_2, L"image\\enemy\\2.bmp", 80, 58);
	g_cSprite->LoadDibSprite(df_SPRITE_ENEMY_3, L"image\\enemy\\3.bmp", 43, 55);
	g_cSprite->LoadDibSprite(df_SPRITE_ENEMY_4, L"image\\enemy\\4.bmp", 160, 120);
	g_cSprite->LoadDibSprite(df_SPRITE_ENEMY_5, L"image\\enemy\\5.bmp", 160, 120);
	g_cSprite->LoadDibSprite(df_SPRITE_ENEMY_6, L"image\\enemy\\6.bmp", 160, 120);
	g_cSprite->LoadDibSprite(df_SPRITE_ENEMY_7, L"image\\enemy\\7.bmp", 160, 120);
	g_cSprite->LoadDibSprite(df_SPRITE_ENEMY_8, L"image\\enemy\\8.bmp", 160, 120);

	// 부서지는 물체 아이콘
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_BROKEN_27, L"image\\broken\\27.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_BROKEN_28, L"image\\broken\\28.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_BROKEN_29, L"image\\broken\\29.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_BROKEN_30, L"image\\broken\\30.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_BROKEN_31, L"image\\broken\\31.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_BROKEN_32, L"image\\broken\\32.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_BROKEN_33, L"image\\broken\\33.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_BROKEN_34, L"image\\broken\\34.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_BROKEN_35, L"image\\broken\\35.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_BROKEN_36, L"image\\broken\\36.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_BROKEN_37, L"image\\broken\\37.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_BROKEN_38, L"image\\broken\\38.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_BROKEN_39, L"image\\broken\\39.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_BROKEN_40, L"image\\broken\\40.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_BROKEN_41, L"image\\broken\\41.bmp", 0, 0);

	// 적 아이콘
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_ENEMY_0, L"image\\enemy\\0_2.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_ENEMY_1, L"image\\enemy\\1_2.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_ENEMY_2, L"image\\enemy\\2_2.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_ENEMY_3, L"image\\enemy\\3_2.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_ENEMY_4, L"image\\enemy\\4_2.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_ENEMY_5, L"image\\enemy\\5_2.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_ENEMY_6, L"image\\enemy\\6_2.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_ENEMY_7, L"image\\enemy\\7_2.bmp", 0, 0);
	g_cSprite->LoadDibSprite(df_SPRITE_MENU_ENEMY_8, L"image\\enemy\\8_2.bmp", 0, 0);

	// 지우개 아이콘
	g_cSprite->LoadDibSprite(df_SPRITE_ERASE, L"image\\Erase.bmp", 0, 0);
}


//--------------------------------------
// 타일 초기화
//--------------------------------------
void InitTile()
{
	stTile* pTile = nullptr;
	int iTileX = g_iMapWidth / 100;
	int iTileY = g_iMapHeight / 50;

	g_vecTile.reserve(iTileX * iTileY);

	for (int i = 0; i < iTileY; ++i)
	{
		for (int j = 0; j < iTileX; ++j)
		{
			pTile = new stTile;
			pTile->dPosX = (j * 100) + ((i % 2)+1) * 50;
			pTile->dPosY = 25 * i;
			g_vecTile.emplace_back(pTile);
		}
	}

	return;
}


//--------------------------------------
// 키 입력 처리
//--------------------------------------
void KeyProcess()
{
	if (GetAsyncKeyState(VK_UP) & 0x8000) {
		if (g_CameraRect.top - df_SPEED_CAMERA >= df_MAP_TOP) {
			g_CameraRect.top = g_CameraRect.top - df_SPEED_CAMERA;
			g_CameraRect.bottom = g_CameraRect.bottom - df_SPEED_CAMERA;
		}
		else {
			g_CameraRect.top = df_MAP_TOP;
			g_CameraRect.bottom = df_MAP_TOP + g_iDestHeight;
		}
	}

	if (GetAsyncKeyState(VK_DOWN) & 0x8000) {
		if (g_CameraRect.bottom + df_SPEED_CAMERA <= g_iMapHeight) {
			g_CameraRect.top = g_CameraRect.top + df_SPEED_CAMERA;
			g_CameraRect.bottom = g_CameraRect.bottom + df_SPEED_CAMERA;
		}
		else {
			g_CameraRect.top = g_iMapHeight - g_iDestHeight;
			g_CameraRect.bottom = g_iMapHeight;
		}
	}

	if (GetAsyncKeyState(VK_LEFT) & 0x8000) {
		if (g_CameraRect.left - df_SPEED_CAMERA >= df_MAP_LEFT) {
			g_CameraRect.left = g_CameraRect.left - df_SPEED_CAMERA;
			g_CameraRect.right = g_CameraRect.right - df_SPEED_CAMERA;
		}
		else {
			g_CameraRect.left = df_MAP_LEFT;
			g_CameraRect.right = df_MAP_LEFT + g_iDestWidth;
		}
	}

	if (GetAsyncKeyState(VK_RIGHT) & 0x8000) {
		if (g_CameraRect.right + df_SPEED_CAMERA <= g_iMapWidth) {
			g_CameraRect.left = g_CameraRect.left + df_SPEED_CAMERA;
			g_CameraRect.right = g_CameraRect.right + df_SPEED_CAMERA;
		}
		else {
			g_CameraRect.left = g_iMapWidth - g_iDestWidth;
			g_CameraRect.right = g_iMapWidth;
		}
	}

	g_cSprite->SetCameraPosition(g_CameraRect.left, g_CameraRect.top);


	// T key
	if (GetAsyncKeyState(0x54) & 0x8000) {
		if (!g_Tkey) {
			if (g_bTileOption) {
				g_bTileOption = false;
			}
			else {
				g_bTileOption = true;
			}
			g_Tkey = true;
		}
	}
	else {
		g_Tkey = false;
	}

	// Y key
	if (GetAsyncKeyState(0x59) & 0x8000) {
		if (!g_YKey) {
			if (g_bPropertiesOption) {
				g_bPropertiesOption = false;
			}
			else {
				g_bPropertiesOption = true;
			}
			g_YKey = true;
		}
	}
	else {
		g_YKey = false;
	}
}


//--------------------------------------
// 정렬
//--------------------------------------
void InsertionSort()
{
	int iListSize;				// 리스트 크기
	int iListNum;				// 정렬 진행위치
	int iListEnd;				// 리스트 끝
	int iSortNum;				// 정렬 진행 위치
	Object *compareObject;					//비교할 값
	Object *sortObject;						//정렬할 값
	CList<Object *>::iterator iter;			//리스트 순환을 위한 이터레이터
	CList<Object *>::iterator iterSort;		//정렬을 위한 이터레이터

	
	iListSize = g_ObjectList->size();

	// 리스트 요소가 2개 이상일 때 정렬
	if (iListSize >= 2) {
		iListNum = 0;
		iListEnd = iListSize - 1;

		iter = g_ObjectList->begin();
		while (iListNum != iListEnd) {
			iterSort = iter;
			compareObject = iterSort._node->_Next->_data;

			iSortNum = iListNum;
			while (iSortNum >= 0) {
				sortObject = iterSort._node->_data;

				// 타입 에따라 우선순위 정렬
				// 같으면
				if (sortObject->m_iType == compareObject->m_iType) {
					// 우선순위 값으로 정렬 (값이 높은걸 뒤로)
					if (sortObject->m_iRenderPriority > compareObject->m_iRenderPriority) {
						iterSort._node->_Next->_data = sortObject;
						iterSort._node->_data = compareObject;
					}
					else {
						break;
					}
				}
				// 다르면 타입 큰게 뒤로감
				else if (sortObject->m_iType > compareObject->m_iType) {
					iterSort._node->_Next->_data = sortObject;
					iterSort._node->_data = compareObject;
				}
				
				--iterSort;
				--iSortNum;
			}

			++iListNum;
			++iter;
		}//while (iListNum != iListEnd)
	}//if (iListSize >= 2)
}


//--------------------------------------
// 저장
//--------------------------------------
void SaveProcess()
{
	CList<Object *>::iterator iter;
	CList<Object *>::iterator iter_end;
	Object *TempObject;
	
	FILE *fp = NULL;			// 파일 포인터
	WCHAR FileName[32];			// 파일 이름이 들어갈 배열
	UINT64 fileSize;			// 파일 크기
	int err;
	
	int iCnt;
	int iSize;
	//wchar_t szObjectName[512];

	StringBuffer StringJSON;
	Writer<StringBuffer, UTF16<>> writer(StringJSON);


	writer.StartObject();

	// 플레이어 정보
	writer.String(L"Player");
	writer.StartArray();
	if (g_Player != NULL) {
		writer.StartObject();

		writer.String(L"iType");
		if (g_Player->m_iSpriteIndex == df_SPRITE_KID_WAKE_UP) {
			writer.Uint(0);
		}
		else {
			writer.Uint(1);
		}
		writer.String(L"iPosX");
		writer.Uint(g_Player->m_dX);
		writer.String(L"iPosY");
		writer.Uint(g_Player->m_dY);

		writer.EndObject();
	}
	writer.EndArray();


	iter = g_ObjectList->begin();
	iter_end = g_ObjectList->end();
	// 스테이지 정보
	writer.String(L"Stage");
	writer.StartArray();
	while (iter != iter_end) {
		TempObject = *iter;

		if (TempObject->m_iType != df_TYPE_STAGE) {
			++iter;
			continue;
		}

		writer.StartObject();

		writer.String(L"iSpriteIndex");
		writer.Uint(TempObject->m_iSpriteIndex - df_SPRITE_STAGE_1);
		writer.String(L"iPosX");
		writer.Uint(TempObject->m_dX);
		writer.String(L"iPosY");
		writer.Uint(TempObject->m_dY);

		writer.EndObject();
		++iter;
	}
	writer.EndArray();


	iter = g_ObjectList->begin();
	// 타일 정보
	writer.String(L"Tile");
	writer.StartArray();
	while (iter != iter_end) {
		TempObject = *iter;

		if (TempObject->m_iType != df_TYPE_TILE) {
			++iter;
			continue;
		}

		writer.StartObject();

		writer.String(L"iSpriteIndex");
		writer.Uint(TempObject->m_iSpriteIndex);
		writer.String(L"iPosX");
		writer.Uint(TempObject->m_dX);
		writer.String(L"iPosY");
		writer.Uint(TempObject->m_dY);

		writer.EndObject();
		++iter;
	}
	writer.EndArray();


	iter = g_ObjectList->begin();
	// 물체 정보
	writer.String(L"Object");
	writer.StartArray();
	while (iter != iter_end) {
		TempObject = *iter;

		if (TempObject->m_iType != df_TYPE_OBJECT) {
			++iter;
			continue;
		}

		writer.StartObject();

		writer.String(L"iSpriteIndex");
		writer.Uint(TempObject->m_iSpriteIndex - df_SPRITE_OBJECT_0);
		writer.String(L"iPosX");
		writer.Uint(TempObject->m_dX);
		writer.String(L"iPosY");
		writer.Uint(TempObject->m_dY);

		writer.EndObject();
		++iter;
	}
	writer.EndArray();
	


	iter = g_ObjectList->begin();
	// 부서지는 물체 정보
	writer.String(L"Broken");
	writer.StartArray();
	while (iter != iter_end) {
		TempObject = *iter;

		if (TempObject->m_iType != df_TYPE_BROKEN) {
			++iter;
			continue;
		}

		writer.StartObject();

		writer.String(L"iSpriteIndex");
		writer.Uint(TempObject->m_iSpriteIndex - df_SPRITE_OBJECT_0);
		writer.String(L"iPosX");
		writer.Uint(TempObject->m_dX);
		writer.String(L"iPosY");
		writer.Uint(TempObject->m_dY);

		writer.EndObject();
		++iter;
	}
	writer.EndArray();


	iter = g_ObjectList->begin();
	// 적 정보
	writer.String(L"Enemy");
	writer.StartArray();
	while (iter != iter_end) {
		TempObject = *iter;

		if (TempObject->m_iType != df_TYPE_ENEMY) {
			++iter;
			continue;
		}

		writer.StartObject();

		writer.String(L"iSpriteIndex");
		writer.Uint(TempObject->m_iSpriteIndex - df_SPRITE_ENEMY_0);
		writer.String(L"iPosX");
		writer.Uint(TempObject->m_dX);
		writer.String(L"iPosY");
		writer.Uint(TempObject->m_dY);

		writer.EndObject();
		++iter;
	}
	writer.EndArray();



	// 스테이지 정보
	writer.String(L"StageSize");
	writer.StartArray();
	writer.StartObject();
	writer.String(L"iWidth");
	writer.Uint(g_iMapWidth);
	writer.String(L"iHeight");
	writer.Uint(g_iMapHeight);
	writer.EndObject();
	writer.EndArray();


	// 맵 속성 정보
	writer.String(L"Properties");
	writer.StartArray();
	writer.StartObject();
	writer.String(L"iPropertiesWidth");
	writer.Uint(g_ObjectStageMap->m_iPropertiesWidth);
	writer.String(L"iPropertiesHeight");
	writer.Uint(g_ObjectStageMap->m_iPropertiesHeight);
	writer.String(L"iPropertiesSize");
	writer.Uint(g_ObjectStageMap->m_iPropertiesSize);
	iSize = g_ObjectStageMap->m_iPropertiesSize;
	// 2019.08.10
	// 너무 느려서 바꿈
	//iCnt = 0;
	//while (iCnt < iSize) {
	//	wsprintfW(szObjectName, L"%d", iCnt);
	//	writer.String(szObjectName);
	//	writer.Int(g_ObjectStageMap->m_bypMapProperties[iCnt]);
	//	++iCnt;
	//}

	// 파일 이름
	wsprintfW(FileName, L"testProperties.txt");

	// 파일 쓰기
	err = _wfopen_s(&fp, FileName, L"wt");
	if (err != 0) {
		return;
	}

	fwrite(g_ObjectStageMap->m_bypMapProperties, iSize, 1, fp);
	fclose(fp);


	// 타일 속성이 저장되어있는 파일 이름
	writer.String(L"PropertiesFileName");
	writer.String(FileName);


	writer.EndObject();
	writer.EndArray();



	writer.EndObject();
	


	const char *pJson = StringJSON.GetString();
	int size = StringJSON.GetSize();

	//WCHAR * wchBuffer = (WCHAR *)new char[size];

	// 파일 크기
	fileSize = size;

	// 파일 이름
	wsprintfW(FileName, L"test.txt");

	// 파일 쓰기
	
	err = _wfopen_s(&fp, FileName, L"wt");
	if (err != 0) {
		return;
	}

	//헤더
	fwrite(&fileSize, sizeof(UINT64), 1, fp);
	//내용물
	fwrite(pJson, size, 1, fp);
	fclose(fp);
}


//--------------------------------------
// 불러오기
//--------------------------------------
void LoadProcess()
{
	FILE *fp = NULL;
	WCHAR FileName[32];
	UINT64 fileSize;					// 읽어들일 JSON 사이즈
	int headerSize = sizeof(UINT64);
	int err;

	CList<Object*>::iterator iter;
	CList<Object*>::iterator iter_end;
	Object * ObjectTemp;

	// 현제 맵툴 위에있는 오브젝트는 날려버림
	iter = g_ObjectList->begin();
	iter_end = g_ObjectList->end();
	while (iter != iter_end) {
		ObjectTemp = *iter;

		// 해당 타입 삭제
		switch (ObjectTemp->m_iType) {
		case df_TYPE_STAGE:
		case df_TYPE_TILE:
		case df_TYPE_PLAYER:
		case df_TYPE_OBJECT:
		case df_TYPE_BROKEN:
		case df_TYPE_ENEMY:
			ObjectTemp = *iter;
			iter = g_ObjectList->erase(iter);
			delete ObjectTemp;
			continue;
		}

		++iter;
	}



	wsprintfW(FileName, L"test.txt");

	//파일 읽기
	err = _wfopen_s(&fp, FileName, L"rt");
	if (err != 0) {
		return;
	}
	
	//헤더 읽기
	fread_s(&fileSize, headerSize, headerSize, 1, fp);

	char *pJson;

	pJson = new char[fileSize + 1];
	fread_s(pJson, fileSize, fileSize, 1, fp);
	pJson[fileSize] = '\0';

	fclose(fp);


	Document Doc;
	Doc.Parse(pJson);

	int iSpriteIndex;
	int iPosX;
	int iPosY;
	int iWidth;
	int iHeight;
	int iPropertiesWidth;
	int iPropertiesHeight;
	int iCnt;
	int iSize;
	char szObjectName[512];
	Object *newObject;
	Value::ConstMemberIterator itr;

	itr = Doc.FindMember("StageSize");
	if (itr != Doc.MemberEnd()) {
		Value &StageSizeArray = Doc["StageSize"];
		for (SizeType i = 0; i < StageSizeArray.Size(); i++) {
			Value &StageSizeObject = StageSizeArray[i];
			itr = StageSizeObject.FindMember("iWidth");
			if (itr == StageSizeObject.MemberEnd()) {
				break;
			}
			itr = StageSizeObject.FindMember("iHeight");
			if (itr == StageSizeObject.MemberEnd()) {
				break;
			}

			iWidth = StageSizeObject["iWidth"].GetUint();
			iHeight = StageSizeObject["iHeight"].GetUint();

			// 스테이지 크기
			g_iMapWidth = iWidth;
			g_iMapHeight = iHeight;
			// 사이즈 변경
			g_ObjectStageMap->ResizeMap(g_iMapWidth, g_iMapHeight);
		}
	}


	// 맵 속성 정보
	itr = Doc.FindMember("Properties");
	if (itr != Doc.MemberEnd()) {
		Value &PropertiesArray = Doc["Properties"];
		for (SizeType i = 0; i < PropertiesArray.Size(); i++) {
			Value &PropertiesObject = PropertiesArray[i];
			itr = PropertiesObject.FindMember("iPropertiesWidth");
			if (itr == PropertiesObject.MemberEnd()) {
				break;
			}
			itr = PropertiesObject.FindMember("iPropertiesHeight");
			if (itr == PropertiesObject.MemberEnd()) {
				break;
			}
			itr = PropertiesObject.FindMember("iPropertiesSize");
			if (itr == PropertiesObject.MemberEnd()) {
				break;
			}

			iPropertiesWidth = PropertiesObject["iPropertiesWidth"].GetUint();
			iPropertiesHeight = PropertiesObject["iPropertiesHeight"].GetUint();
			iSize = PropertiesObject["iPropertiesSize"].GetUint();


			g_ObjectStageMap->ResizeMap(iWidth, iHeight);

			// 2019.08.10
			// 너무 느려서 바꿈
			//iCnt = 0;
			//while (iCnt < iSize) {

			//	wsprintfA(szObjectName, "%d", iCnt);

			//	itr = PropertiesObject.FindMember(szObjectName);
			//	if (itr == PropertiesObject.MemberEnd()) {
			//		break;
			//	}

			//	g_ObjectStageMap->m_bypMapProperties[iCnt] = PropertiesObject[szObjectName].GetUint();

			//	++iCnt;
			//}



			// 타일 속성이 저장되어있는 파일 이름
			itr = PropertiesObject.FindMember("PropertiesFileName");
			if (itr == PropertiesObject.MemberEnd()) {
				break;
			}

			// UTF8 -> UTF16 변환
			UTF8toUTF16(PropertiesObject["PropertiesFileName"].GetString(), FileName, 32);

			// 파일 읽기
			err = _wfopen_s(&fp, FileName, L"rt");
			if (err != 0) {
				return;
			}

			//fwrite(g_ObjectStageMap->m_bypMapProperties, iSize, 1, fp);
			// 속성 읽기
			// ResizeMap 함수를 호출해서 버퍼를 동적할당 해놨음
			// 동적 할당한 곳에 파일 데이터 복사
			fread_s(g_ObjectStageMap->m_bypMapProperties, iSize, iSize, 1, fp);
			fclose(fp);

		}
	}


	// 스테이지 정보
	itr = Doc.FindMember("Stage");
	if (itr != Doc.MemberEnd()) {
		Value &TileArray = Doc["Stage"];
		for (SizeType i = 0; i < TileArray.Size(); i++) {
			Value &TileObject = TileArray[i];
			itr = TileObject.FindMember("iSpriteIndex");
			if (itr == TileObject.MemberEnd()) {
				break;
			}
			itr = TileObject.FindMember("iPosX");
			if (itr == TileObject.MemberEnd()) {
				break;
			}
			itr = TileObject.FindMember("iPosY");
			if (itr == TileObject.MemberEnd()) {
				break;
			}
			iSpriteIndex = TileObject["iSpriteIndex"].GetUint();
			iPosX = TileObject["iPosX"].GetUint();
			iPosY = TileObject["iPosY"].GetUint();

			// 오브젝트 생성
			newObject = new ObjectUnit(df_TYPE_STAGE, iSpriteIndex + df_SPRITE_STAGE_1, iPosX, iPosY);
			g_ObjectList->push_back(newObject);
		}
	}


	// 타일 정보
	itr = Doc.FindMember("Tile");
	if (itr != Doc.MemberEnd()) {
		Value &TileArray = Doc["Tile"];
		for (SizeType i = 0; i < TileArray.Size(); i++) {
			Value &TileObject = TileArray[i];
			itr = TileObject.FindMember("iSpriteIndex");
			if (itr == TileObject.MemberEnd()) {
				break;
			}
			itr = TileObject.FindMember("iPosX");
			if (itr == TileObject.MemberEnd()) {
				break;
			}
			itr = TileObject.FindMember("iPosY");
			if (itr == TileObject.MemberEnd()) {
				break;
			}
			iSpriteIndex = TileObject["iSpriteIndex"].GetUint();
			iPosX = TileObject["iPosX"].GetUint();
			iPosY = TileObject["iPosY"].GetUint();

			// 오브젝트 생성
			newObject = new ObjectUnit(df_TYPE_TILE, iSpriteIndex, iPosX, iPosY);
			g_ObjectList->push_back(newObject);
		}
	}



	// 플레이어 정보
	itr = Doc.FindMember("Player");
	if (itr != Doc.MemberEnd()) {
		Value &PlayerArray = Doc["Player"];
		for (SizeType i = 0; i < PlayerArray.Size(); i++) {
			Value &PlayerObject = PlayerArray[i];
			itr = PlayerObject.FindMember("iType");
			if (itr == PlayerObject.MemberEnd()) {
				break;
			}
			itr = PlayerObject.FindMember("iPosX");
			if (itr == PlayerObject.MemberEnd()) {
				break;
			}
			itr = PlayerObject.FindMember("iPosY");
			if (itr == PlayerObject.MemberEnd()) {
				break;
			}
			iSpriteIndex = PlayerObject["iType"].GetUint();
			// 1이면 떨어지는거
			if (iSpriteIndex) {

			}
			// 0이면 일어나는거
			else {
				iSpriteIndex = df_SPRITE_KID_WAKE_UP;
			}
			iPosX = PlayerObject["iPosX"].GetUint();
			iPosY = PlayerObject["iPosY"].GetUint();

			// 오브젝트 생성
			newObject = new ObjectUnit(df_TYPE_PLAYER, iSpriteIndex, iPosX, iPosY);
			g_ObjectList->push_back(newObject);
		}
	}



	// 물체 정보
	itr = Doc.FindMember("Object");
	if (itr != Doc.MemberEnd()) {
		Value &ObjectArray = Doc["Object"];
		for (SizeType i = 0; i < ObjectArray.Size(); i++) {
			Value &Object = ObjectArray[i];
			itr = Object.FindMember("iSpriteIndex");
			if (itr == Object.MemberEnd()) {
				break;
			}
			itr = Object.FindMember("iPosX");
			if (itr == Object.MemberEnd()) {
				break;
			}
			itr = Object.FindMember("iPosY");
			if (itr == Object.MemberEnd()) {
				break;
			}
			iSpriteIndex = Object["iSpriteIndex"].GetUint();
			iPosX = Object["iPosX"].GetUint();
			iPosY = Object["iPosY"].GetUint();

			// 오브젝트 생성
			newObject = new ObjectUnit(df_TYPE_OBJECT, iSpriteIndex + df_SPRITE_OBJECT_0, iPosX, iPosY);
			g_ObjectList->push_back(newObject);
		}
	}



	// 부서지는 물체 정보
	itr = Doc.FindMember("Broken");
	if (itr != Doc.MemberEnd()) {
		Value &BrokenArray = Doc["Broken"];
		for (SizeType i = 0; i < BrokenArray.Size(); i++) {
			Value &BrokenObject = BrokenArray[i];
			itr = BrokenObject.FindMember("iSpriteIndex");
			if (itr == BrokenObject.MemberEnd()) {
				break;
			}
			itr = BrokenObject.FindMember("iPosX");
			if (itr == BrokenObject.MemberEnd()) {
				break;
			}
			itr = BrokenObject.FindMember("iPosY");
			if (itr == BrokenObject.MemberEnd()) {
				break;
			}
			iSpriteIndex = BrokenObject["iSpriteIndex"].GetUint();
			iPosX = BrokenObject["iPosX"].GetUint();
			iPosY = BrokenObject["iPosY"].GetUint();

			// 오브젝트 생성
			newObject = new ObjectUnit(df_TYPE_BROKEN, iSpriteIndex + df_SPRITE_OBJECT_0, iPosX, iPosY);
			g_ObjectList->push_back(newObject);
		}
	}



	// 적 정보
	itr = Doc.FindMember("Enemy");
	if (itr != Doc.MemberEnd()) {
		Value &BrokenArray = Doc["Enemy"];
		for (SizeType i = 0; i < BrokenArray.Size(); i++) {
			Value &BrokenObject = BrokenArray[i];
			itr = BrokenObject.FindMember("iSpriteIndex");
			if (itr == BrokenObject.MemberEnd()) {
				break;
			}
			itr = BrokenObject.FindMember("iPosX");
			if (itr == BrokenObject.MemberEnd()) {
				break;
			}
			itr = BrokenObject.FindMember("iPosY");
			if (itr == BrokenObject.MemberEnd()) {
				break;
			}
			iSpriteIndex = BrokenObject["iSpriteIndex"].GetUint();
			iPosX = BrokenObject["iPosX"].GetUint();
			iPosY = BrokenObject["iPosY"].GetUint();

			// 오브젝트 생성
			newObject = new ObjectUnit(df_TYPE_ENEMY, iSpriteIndex + df_SPRITE_ENEMY_0, iPosX, iPosY);
			g_ObjectList->push_back(newObject);
		}
	}
}


//UTF-8 -> UTF-16
void UTF8toUTF16(const char *szText, WCHAR *szBuff, int iBuffLen) {
	int iRe = MultiByteToWideChar(CP_UTF8, 0, szText, strlen(szText), szBuff, iBuffLen);
	if (iRe < iBuffLen)
		szBuff[iRe] = L'\0';
	return;
}


void UpdateProperties()
{
	CList<Object*>::iterator iter;
	CList<Object*>::iterator iter_end;
	Object * ObjectTemp;
	int iSpriteIndex;
	int iPropertiesCenterPointX;						// 속성 중점 좌표 X
	int iPropertiesCenterPointY;						// 속성 중점 좌표 Y
	int iPropertiesSizeX;								// 속성 크기 X
	int iPropertiesSizeY;								// 속성 크기 Y
	int iPropertiesX;									// 업데이트할 속성 위치
	int iPropertiesY;									// 업데이트할 속성 위치


	// 속성 초기화
	g_ObjectStageMap->m_bypMapProperties;
	memset(g_ObjectStageMap->m_bypMapProperties, 1, g_ObjectStageMap->m_iPropertiesSize);

	iter = g_ObjectList->begin();
	iter_end = g_ObjectList->end();
	while (iter != iter_end) {
		ObjectTemp = *iter;

		// 속성 값 셋
		switch (ObjectTemp->m_iType) {
		case df_TYPE_STAGE:
		case df_TYPE_TILE:
		case df_TYPE_PLAYER:
		case df_TYPE_OBJECT:
		case df_TYPE_BROKEN:
		case df_TYPE_ENEMY:
			iSpriteIndex = ObjectTemp->m_iSpriteIndex;
			switch (iSpriteIndex) {
			case df_SPRITE_STAGE_1:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesStage_1;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 0;
				g_byCheckMapProperties = 1;
				break;
			case df_SPRITE_STAGE_2:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesStage_2;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 0;
				g_byCheckMapProperties = 1;
				break;
			case df_SPRITE_STAGE_3:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesStage_3;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 0;
				g_byCheckMapProperties = 1;
				break;
			case df_SPRITE_STAGE_4:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesStage_4;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 0;
				g_byCheckMapProperties = 1;
				break;

				//--------------------------------------
				// 부서지는 물체
				//--------------------------------------
			case df_SPRITE_OBJECT_0:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_0;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_1:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_1;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_2:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_2;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_3:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_3;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_4:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_4;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_5:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_5;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_6:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_6;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_7:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_7;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_8:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_8;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_9:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_9;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_10:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_10;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_11:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_11;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_12:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_12;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_13:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_13;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_14:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_14;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_15:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_15;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_16:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_16;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_17:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_17;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_18:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_18;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_19:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_19;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_20:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_20;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_21:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_21;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_22:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_22;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_23:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_23;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_24:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_24;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_25:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_25;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_26:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_26;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_27:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_27;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_OBJECT_28:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesObject_28;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;

				//--------------------------------------
				// 부서지는 물체
				//--------------------------------------
			case df_SPRITE_BROKEN_27:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesBroken_27;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_BROKEN_28:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesBroken_28;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_BROKEN_29:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesBroken_29;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_BROKEN_30:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesBroken_30;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_BROKEN_31:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesBroken_31;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_BROKEN_32:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesBroken_32;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_BROKEN_33:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesBroken_33;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_BROKEN_34:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesBroken_34;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_BROKEN_35:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesBroken_35;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_BROKEN_36:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesBroken_36;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_BROKEN_37:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesBroken_37;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_BROKEN_38:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesBroken_38;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_BROKEN_39:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesBroken_39;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_BROKEN_40:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesBroken_40;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_BROKEN_41:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesBroken_41;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 3;
				g_byCheckMapProperties = 0;
				break;

				//--------------------------------------
				// 적
				//--------------------------------------
			case df_SPRITE_ENEMY_0:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesEnemy_0;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_ENEMY_1:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesEnemy_1;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_ENEMY_2:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesEnemy_2;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_ENEMY_3:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesEnemy_3;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_ENEMY_4:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesEnemy_4;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_ENEMY_5:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesEnemy_5;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_ENEMY_6:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesEnemy_6;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_ENEMY_7:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesEnemy_7;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;
			case df_SPRITE_ENEMY_8:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMakePropertiesEnemy_8;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;

				//--------------------------------------
				// 플레이어
				//--------------------------------------
			case df_SPRITE_KID_WAKE_UP:
				iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
				iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
				g_iPropertiesCenterPointX = iPropertiesCenterPointX;
				g_iPropertiesCenterPointY = iPropertiesCenterPointY;
				g_bypArrayMAkeTileProperties = g_byArrayMAkePlayerWakeUpProperties;
				// 속성 크기
				iPropertiesSizeX = g_cSprite->m_stpSprite[iSpriteIndex].iWidth / df_TILE_PROPERTIES_SIZE;
				// 소수점이 있다면 +1
				if (g_cSprite->m_stpSprite[ObjectTemp->m_iSpriteIndex].iWidth % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeX;
				}
				iPropertiesSizeY = g_cSprite->m_stpSprite[iSpriteIndex].iHeight / df_TILE_PROPERTIES_SIZE;
				if (g_cSprite->m_stpSprite[iSpriteIndex].iHeight % df_TILE_PROPERTIES_SIZE) {
					++iPropertiesSizeY;
				}
				g_iMakePropertiesSizeX = iPropertiesSizeX;
				g_iMakePropertiesSizeY = iPropertiesSizeY;
				g_byCheckMakeProperties = 2;
				g_byCheckMapProperties = 0;
				break;

				//--------------------------------------
				// 이외
				//--------------------------------------
			default:

				//--------------------------------------
				// 타일
				//--------------------------------------
				if (df_SPRITE_TILE_40 <= iSpriteIndex && iSpriteIndex <= df_SPRITE_TILE_49) {
					iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
					iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
					g_iPropertiesCenterPointX = iPropertiesCenterPointX;
					g_iPropertiesCenterPointY = iPropertiesCenterPointY;
					g_bypArrayMAkeTileProperties = g_byArrayMAkeTileProperties_4;
					g_iMakePropertiesSizeX = df_TILE_PROPERTIES_X;
					g_iMakePropertiesSizeY = df_TILE_PROPERTIES_Y;
					g_byCheckMakeProperties = 0;
					g_byCheckMapProperties = 1;
				}
				else if (df_SPRITE_TILE_0 <= iSpriteIndex && iSpriteIndex <= df_SPRITE_TILE_39) {
					iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
					iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
					g_iPropertiesCenterPointX = iPropertiesCenterPointX;
					g_iPropertiesCenterPointY = iPropertiesCenterPointY;
					g_bypArrayMAkeTileProperties = g_byArrayMAkeTileProperties_1;
					g_iMakePropertiesSizeX = df_TILE_PROPERTIES_X;
					g_iMakePropertiesSizeY = df_TILE_PROPERTIES_Y;
					g_byCheckMakeProperties = 0;
					g_byCheckMapProperties = 1;
				}
				else if (df_SPRITE_TILE_50 <= iSpriteIndex && iSpriteIndex <= df_SPRITE_TILE_79) {
					iPropertiesCenterPointX = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointX / df_TILE_PROPERTIES_SIZE;
					iPropertiesCenterPointY = g_cSprite->m_stpSprite[iSpriteIndex].iCenterPointY / df_TILE_PROPERTIES_SIZE;
					g_iPropertiesCenterPointX = iPropertiesCenterPointX;
					g_iPropertiesCenterPointY = iPropertiesCenterPointY;
					g_bypArrayMAkeTileProperties = g_byArrayMAkeTileProperties_1;
					g_iMakePropertiesSizeX = df_TILE_PROPERTIES_X;
					g_iMakePropertiesSizeY = df_TILE_PROPERTIES_Y;
					g_byCheckMakeProperties = 0;
					g_byCheckMapProperties = 1;
				}
				else {
					// 없다
					throw;
				}
				
				break;
			}// switch (iSpriteIndex)

			iPropertiesX = ObjectTemp->m_dX / df_TILE_PROPERTIES_SIZE;
			iPropertiesY = ObjectTemp->m_dY / df_TILE_PROPERTIES_SIZE;

			g_ObjectStageMap->SetProperties(iPropertiesX, iPropertiesY);

			break;
		} //switch (ObjectTemp->m_iType)

		++iter;
	}

	
}


bool CheckTile(double dTileY, double dTileX)
{
	// y = mx + n;
	// m
	double dm[4] =
	{
		(50 * 0.5f) / (100 * 0.5f),
		-(50 * 0.5f) / (100 * 0.5f),
		(50 * 0.5f) / (100 * 0.5f),
		-(50 * 0.5f) / (100 * 0.5f)
	};

	// 타일 꼭지점
	stVec2 vPoint[4] =
	{
		{ dTileX, dTileY + (50 * 0.5f) },
		{ dTileX + (100 * 0.5f), dTileY },
		{ dTileX, dTileY - (50 * 0.5f) },
		{ dTileX - (100 * 0.5f), dTileY }
	};
	// y = mx + n -> n = y - mx;
	// n
	double dn[4] =
	{
		vPoint[0].dY - dm[0] * vPoint[0].dX,
		vPoint[1].dY - dm[1] * vPoint[1].dX,
		vPoint[2].dY - dm[2] * vPoint[2].dX,
		vPoint[3].dY - dm[3] * vPoint[3].dX,
	};
	// 0 = ax + b - y;
	if (0 < dm[0] * g_iMouseX + dn[0] - g_iMouseY &&
		0 < dm[1] * g_iMouseX + dn[1] - g_iMouseY &&
		0 > dm[2] * g_iMouseX + dn[2] - g_iMouseY &&
		0 > dm[3] * g_iMouseX + dn[3] - g_iMouseY)
		return true;

	return false;
}
